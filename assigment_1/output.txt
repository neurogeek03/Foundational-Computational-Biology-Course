
    Edit the paths to match your file structure here: 

    Part 1: Probability Analysis
    
===== Section 1: Defining Amino Acid Probabilities  =====
Computing the probability of a 6-mer matching the pattern...
Probability of a random 6-mer matching the pattern: 0.001227
The number of 6-mers in the Yfp1 150 residue-long sequence is 145
Calculating the probability of at least one of the 145 6-mers to match the query sequence...
SECTION 1 - ANSWER: The probability of at least one of the 145 6-mers matching the query sequence is 0.177906
===== Section 2: Posterior probability that Yfp1 is phosphorylated by Cmk2  =====
SECTION 2 - ANSWER: The posterior probability that Yfp1 is phosphorylated by Cmk2, given that it matches the pattern, is: 0.0126

    Part 2: Probability Analysis
    
===== Section 1 =====
This is a preview of the .fasta file
               ID                                           Sequence
0  YAL001C_BY4741  MVLTIYPDELVQIVSDKIASNKGKITLNQLWDISGKYFDLSDKKVK...
1  YAL002W_BY4741  MEQNGLDHDSRSSIDTTINDTQKTFLEFRSYTQLSEKLASSSSYTA...
2  YAL003W_BY4741  MASTDFSKIETLKQLNASLADKSYIEGTAVSQADVTVFKAFQSAYP...
3  YAL005C_BY4741  MSKAVGIDLGTTYSCVAHFANDRVDIIANDQGNRTTPSFVAFTDTE...
4  YAL007C_BY4741  MIKSTIALPSFFIVLILALVNSVAASSSYAPVAISLPAFSKECLYY...
The pattern we are searching for is:
R.{2}[ST].{1}[ST]
A function to find the pattern in each sequence in the fasta file is defined
The function is applied to read the 'Sequence' column in the .fasta file and note the 
    number of matches in the 'Match_count' column
This is how the dataframe looks like after we count the pattern matches:
               ID  ... Match_Count
0  YAL001C_BY4741  ...           5
1  YAL002W_BY4741  ...           1
2  YAL003W_BY4741  ...           0
3  YAL005C_BY4741  ...           1
4  YAL007C_BY4741  ...           0

[5 rows x 3 columns]
Counting how many proteins match the pattern at least once...
The total number of proteins with at least one match to the pattern is 2227
The total number of proteins in the genome is 6682
SECTION 1 - ANSWER: The fraction of proteins that match the pattern is 0.3333
===== Section 2 =====
First we define the 20 amino acids in the genome as follows: ACDEFGHIKLMNPQRSTVWY
We use the counter to find how many appearances of each amino acid are there in each protein sequence.
We sum the counts for each amino acid across sequences
The total appearances of each amino acid are as follows: 3005506
We iterate over the string of amino acids to compute the frequency for each one and saving it all in a dictionary
Converting the dictionary into a vector
SECTION 2 - ANSWER: The computed amino acid frequencies for the yeast proteome are [('A', 0.054675651953448104), ('C', 0.013162509075010997), ('D', 0.057521429003968054), ('E', 0.06430996976881763), ('F', 0.0450463249782233), ('G', 0.04940898471006213), ('H', 0.021735108830260197), ('I', 0.06549845516861387), ('K', 0.07256182486409943), ('L', 0.09558623406507923), ('M', 0.02087768249339712), ('N', 0.060851650271202255), ('P', 0.043787967816400965), ('Q', 0.039093916298952654), ('R', 0.04450365429315396), ('S', 0.090449328665456), ('T', 0.05894182210915566), ('V', 0.05569311789761857), ('W', 0.010404570811038141), ('Y', 0.03366687672558298)]
===== Section 3 =====
Reading the assigment instructions pdf file where the amino acid frequency table is found
Extracting the text from page 2 of the pdf...
Here's how the text looks like:
Observed Frequency of Amino Acids in S. cerevisiae according to (Xia, 2018)
Amino Acid Frequency
Ala 5.9%
Arg 4.0%
Asn 6.2%
Asp 5.9%
Cys 1.3%
Gln 4.0%
Glu 6.6%
Gly 5.0%
His 2.2%
Ile 6.5%
Leu 9.5%
Lys 7.3%
Met 2.1%
Phe 4.1%
Pro 4.4%
Ser 9.3%
Thr 5.0%
Trp 1.4%
Tyr 3.4%
Val 5.9%
Splitting the text by line and spaces, while removing the '%' sign. Then the data is saved into a list
Converting the table into a pandas dataframe...
This is how the table looks like:
   Amino Acid  Frequency (%)
0         Ala            5.9
1         Arg            4.0
2         Asn            6.2
3         Asp            5.9
4         Cys            1.3
5         Gln            4.0
6         Glu            6.6
7         Gly            5.0
8         His            2.2
9         Ile            6.5
10        Leu            9.5
11        Lys            7.3
12        Met            2.1
13        Phe            4.1
14        Pro            4.4
15        Ser            9.3
16        Thr            5.0
17        Trp            1.4
18        Tyr            3.4
19        Val            5.9
To compare the two frequency tables we will place them in the same pandas dataframe
Converting the frequency vector from Section 2 into a pandas dataframe
Here is how the frequencies from Section 2 look like:
   Amino Acid  Frequency
0           A   0.054676
1           C   0.013163
2           D   0.057521
3           E   0.064310
4           F   0.045046
5           G   0.049409
6           H   0.021735
7           I   0.065498
8           K   0.072562
9           L   0.095586
10          M   0.020878
11          N   0.060852
12          P   0.043788
13          Q   0.039094
14          R   0.044504
15          S   0.090449
16          T   0.058942
17          V   0.055693
18          W   0.010405
19          Y   0.033667
This table contains frequencies that are computed as a fraction of the total amino acids and not as percentage. 
    It also uses the single letter nomenclature rather than the 3-letter convention. Let's change that.
    
Here's how the refined table looks like:
   Amino Acid  Frequency
0         Ala        5.5
1         Cys        1.3
2         Asp        5.8
3         Glu        6.4
4         Phe        4.5
5         Gly        4.9
6         His        2.2
7         Ile        6.5
8         Lys        7.3
9         Leu        9.6
10        Met        2.1
11        Asn        6.1
12        Pro        4.4
13        Gln        3.9
14        Arg        4.5
15        Ser        9.0
16        Thr        5.9
17        Val        5.6
18        Trp        1.0
19        Tyr        3.4
Merging the 2 dataframes...
Here's how the merged dataframe looks like:
   Amino Acid  Part 1 Table  Section 2
0         Ala           5.9        5.5
1         Arg           4.0        4.5
2         Asn           6.2        6.1
3         Asp           5.9        5.8
4         Cys           1.3        1.3
5         Gln           4.0        3.9
6         Glu           6.6        6.4
7         Gly           5.0        4.9
8         His           2.2        2.2
9         Ile           6.5        6.5
10        Leu           9.5        9.6
11        Lys           7.3        7.3
12        Met           2.1        2.1
13        Phe           4.1        4.5
14        Pro           4.4        4.4
15        Ser           9.3        9.0
16        Thr           5.0        5.9
17        Trp           1.4        1.0
18        Tyr           3.4        3.4
19        Val           5.9        5.6
Computing the difference in frequencies in a new column of the merged dataframe...
Here's the dataframe with the difference between frequencies:
   Amino Acid  Part 1 Table  Section 2  Difference
0         Ala           5.9        5.5         0.4
1         Arg           4.0        4.5        -0.5
2         Asn           6.2        6.1         0.1
3         Asp           5.9        5.8         0.1
4         Cys           1.3        1.3         0.0
5         Gln           4.0        3.9         0.1
6         Glu           6.6        6.4         0.2
7         Gly           5.0        4.9         0.1
8         His           2.2        2.2         0.0
9         Ile           6.5        6.5         0.0
10        Leu           9.5        9.6        -0.1
11        Lys           7.3        7.3         0.0
12        Met           2.1        2.1         0.0
13        Phe           4.1        4.5        -0.4
14        Pro           4.4        4.4         0.0
15        Ser           9.3        9.0         0.3
16        Thr           5.0        5.9        -0.9
17        Trp           1.4        1.0         0.4
18        Tyr           3.4        3.4         0.0
19        Val           5.9        5.6         0.3
SECTION 3 - ANSWER: The two organisms differ in their amino acid frequencies especially in terma of Alanine,
    Arginine, Phenyalanine, Threonine and Tryptophan. After looking at the column "Differences" in the pandas dataset, we can 
    observe that there are both positive and negative values. The positive values mean in S. cevirisae, these amino acids are 
    more abundant in its proteins compared to the S288C yeast strain. The negative values mean that these amino acids are more 
    abundant in the proteins of the S288C yeast strain. In general, different values can reflect specific adaptations of each 
    organism, while similar values (Difference is close to zero) can be interpreted as having some similarity in the proteome
    and hence sharing certain pathways such as metabolic pathways. There are several biological implications of these 
    differences, such as different adaptations that each organism needs to make to adjust to its environment. This could dictate
    the need for a different protein repertoire. Further, the organisms might not be sharing the same codon frequencies or 
    might not use the same codons (due to differences in open reading frames, for example), which would lead to differences in
    amino acid usage. 
    
===== Section 4 =====
A frequency matrix will be created from the vector of 20 frequencies calculated in Step 2
We will iterate over this vector [('A', 0.054675651953448104), ('C', 0.013162509075010997), ('D', 0.057521429003968054), ('E', 0.06430996976881763), ('F', 0.0450463249782233), ('G', 0.04940898471006213), ('H', 0.021735108830260197), ('I', 0.06549845516861387), ('K', 0.07256182486409943), ('L', 0.09558623406507923), ('M', 0.02087768249339712), ('N', 0.060851650271202255), ('P', 0.043787967816400965), ('Q', 0.039093916298952654), ('R', 0.04450365429315396), ('S', 0.090449328665456), ('T', 0.05894182210915566), ('V', 0.05569311789761857), ('W', 0.010404570811038141), ('Y', 0.03366687672558298)]
Separating the ferquency values from the amino acis keys in the vector.
The amino acid frequencies are: {'A': 0.054675651953448104, 'C': 0.013162509075010997, 'D': 0.057521429003968054, 'E': 0.06430996976881763, 'F': 0.0450463249782233, 'G': 0.04940898471006213, 'H': 0.021735108830260197, 'I': 0.06549845516861387, 'K': 0.07256182486409943, 'L': 0.09558623406507923, 'M': 0.02087768249339712, 'N': 0.060851650271202255, 'P': 0.043787967816400965, 'Q': 0.039093916298952654, 'R': 0.04450365429315396, 'S': 0.090449328665456, 'T': 0.05894182210915566, 'V': 0.05569311789761857, 'W': 0.010404570811038141, 'Y': 0.03366687672558298}
The amino acid codes are: ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
Creating an empty dataframe where the column represents the first amino acid and the row represents the second one
Here's how it looks like:      A    C    D    E    F  ...    S    T    V    W    Y
A  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
C  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
D  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
E  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
F  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
G  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
H  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
I  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
K  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
L  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
M  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
N  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
P  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
Q  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
R  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
S  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
T  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
V  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
W  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN
Y  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN  NaN  NaN

[20 rows x 20 columns]
Now we will compute the expected frequencies assuming independece, following this formula: P(AA1, AA2) = P(AA1) * P(AA2)
SECTION 4 - ANSWER: This is how the frequency matrix looks like:           A         C  ...         W         Y
A  0.002989  0.000720  ...  0.000569  0.001841
C  0.000720  0.000173  ...  0.000137  0.000443
D  0.003145  0.000757  ...  0.000598  0.001937
E  0.003516  0.000846  ...  0.000669  0.002165
F  0.002463  0.000593  ...  0.000469  0.001517
G  0.002701  0.000650  ...  0.000514  0.001663
H  0.001188  0.000286  ...  0.000226  0.000732
I  0.003581  0.000862  ...  0.000681  0.002205
K  0.003967  0.000955  ...  0.000755  0.002443
L  0.005226  0.001258  ...  0.000995  0.003218
M  0.001142  0.000275  ...  0.000217  0.000703
N  0.003327  0.000801  ...  0.000633  0.002049
P  0.002394  0.000576  ...  0.000456  0.001474
Q  0.002137  0.000515  ...  0.000407  0.001316
R  0.002433  0.000586  ...  0.000463  0.001498
S  0.004945  0.001191  ...  0.000941  0.003045
T  0.003223  0.000776  ...  0.000613  0.001984
V  0.003045  0.000733  ...  0.000579  0.001875
W  0.000569  0.000137  ...  0.000108  0.000350
Y  0.001841  0.000443  ...  0.000350  0.001133

[20 rows x 20 columns]
I would like to save this as a figure, coloring the matrix cells based on their probability value
===== Section 5 =====
Here we will count how often the amino acid pairs actually occur in the proteome.
Here's how the emmpty matrix looks like:    A  C  D  E  F  G  H  I  K  ...  N  P  Q  R  S  T  V  W  Y
A  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
C  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
D  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
E  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
F  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
G  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
H  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
I  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
K  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
L  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
M  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
N  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
P  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
Q  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
R  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
S  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
T  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
V  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
W  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0
Y  0  0  0  0  0  0  0  0  0  ...  0  0  0  0  0  0  0  0  0

[20 rows x 20 columns]
We will iterate over each protein sequence in the .fasta file
This process takes a while ...
Here's how the matrix containing the count looks like:        A     C      D      E  ...      T      V     W     Y
A  11871  2253   7836   9080  ...  10726   9533  1506  5132
C   2021   972   1983   1878  ...   2086   2337   480  1459
D   9231  1999  13673  14766  ...   8962  10197  1873  6157
E  10178  1987  12777  17499  ...  10804  10111  1852  6580
F   7112  1895   7954   8224  ...   7712   7580  1566  4950
G   8273  2280   7978   8451  ...   9052   8899  1788  5373
H   3201  1045   3715   3768  ...   3514   3487   776  2446
I  10808  2932  11778  12060  ...  11313  11076  2257  6412
K  10882  2505  12274  15849  ...  11908  11805  2287  8149
L  15884  4117  15847  17895  ...  15722  15209  2721  9330
M   4062   779   3876   4039  ...   3975   3699   570  1794
N   9569  2228  12026  12644  ...  10475  10280  1985  6011
P   6775  1247   6486   8563  ...   8339   7814  1347  4307
Q   5807  1400   6221   8199  ...   5965   6005  1240  4373
R   6829  1818   7264   8176  ...   7446   6759  1431  4721
S  14585  3212  13894  13965  ...  18833  14004  2456  7780
T  10496  2083   9099   9890  ...  13376  10716  1873  5189
V  10115  2408   9943  10396  ...   9896  10394  1656  5536
W   1559   704   1941   1901  ...   1527   1833   433  1147
Y   5070  1696   6316   6041  ...   5519   5648  1174  4340

[20 rows x 20 columns]
Dividing each di-amino acid count by the total counts to get its frequency...
SECTION 5 - ANSWER: Here's how the 20x20 matrix of the empirial frequencies looks like:          A         C  ...         W         Y
A  0.003967  0.000753  ...  0.000503  0.001715
C  0.000675  0.000325  ...  0.000160  0.000488
D  0.003085  0.000668  ...  0.000626  0.002058
E  0.003402  0.000664  ...  0.000619  0.002199
F  0.002377  0.000633  ...  0.000523  0.001654
G  0.002765  0.000762  ...  0.000598  0.001796
H  0.001070  0.000349  ...  0.000259  0.000817
I  0.003612  0.000980  ...  0.000754  0.002143
K  0.003637  0.000837  ...  0.000764  0.002723
L  0.005309  0.001376  ...  0.000909  0.003118
M  0.001358  0.000260  ...  0.000190  0.000600
N  0.003198  0.000745  ...  0.000663  0.002009
P  0.002264  0.000417  ...  0.000450  0.001439
Q  0.001941  0.000468  ...  0.000414  0.001461
R  0.002282  0.000608  ...  0.000478  0.001578
S  0.004874  0.001073  ...  0.000821  0.002600
T  0.003508  0.000696  ...  0.000626  0.001734
V  0.003381  0.000805  ...  0.000553  0.001850
W  0.000521  0.000235  ...  0.000145  0.000383
Y  0.001694  0.000567  ...  0.000392  0.001450

[20 rows x 20 columns]
I would like to save this as a figure next to the matrix from section 4, 
    coloring the matrix cells based on their probability value
===== Section 6 =====
To compute the conditional amino acid frequencies given that a certain amino acid 
    is preceded by Isoleucine (I) or Glutamine (Q), a relevant fucntion is defined, 
    where the probability of the amino acid of interest (x) being preceded by a defined amino acid (y)
    is divided with the total occurrences of y. This is explained in detail in the .doc file 
    of this assignment. 
After computing the frequencies, I will organize them in a pandas dataframe
SECTION 6 - ANSWER: The conditional probabilities for amino acids preceded by Isoleusine (I) and Glutamine (Q) are:    Preceding AA Following AA  Frequency
0             I            A   0.055037
1             I            C   0.014930
2             I            D   0.059976
3             I            E   0.061412
4             I            F   0.047022
5             I            G   0.047455
6             I            H   0.022284
7             I            I   0.066861
8             I            K   0.069815
9             I            L   0.097481
10            I            M   0.018724
11            I            N   0.059589
12            I            P   0.050372
13            I            Q   0.036491
14            I            R   0.042836
15            I            S   0.091559
16            I            T   0.057609
17            I            V   0.056402
18            I            W   0.011493
19            I            Y   0.032651
20            Q            A   0.049547
21            Q            C   0.011945
22            Q            D   0.053079
23            Q            E   0.069956
24            Q            F   0.044803
25            Q            G   0.043685
26            Q            H   0.023037
27            Q            I   0.062575
28            Q            K   0.069648
29            Q            L   0.103555
30            Q            M   0.019581
31            Q            N   0.060246
32            Q            P   0.041023
33            Q            Q   0.072345
34            Q            R   0.050895
35            Q            S   0.074060
36            Q            T   0.050895
37            Q            V   0.051236
38            Q            W   0.010580
39            Q            Y   0.037311
===== Section 7 =====
Converting the marginal amino acid frequencies into a pandas dataframe & computing their difference
It looks like this:    Following AA  Frequency
0             A   0.054676
1             C   0.013163
2             D   0.057521
3             E   0.064310
4             F   0.045046
5             G   0.049409
6             H   0.021735
7             I   0.065498
8             K   0.072562
9             L   0.095586
10            M   0.020878
11            N   0.060852
12            P   0.043788
13            Q   0.039094
14            R   0.044504
15            S   0.090449
16            T   0.058942
17            V   0.055693
18            W   0.010405
19            Y   0.033667
Here's how the combined dataframe looks like:    Preceding_AA  ... Difference
0             I  ...   0.000361
1             I  ...   0.001768
2             I  ...   0.002455
3             I  ...  -0.002897
4             I  ...   0.001975
5             I  ...  -0.001954
6             I  ...   0.000549
7             I  ...   0.001363
8             I  ...  -0.002747
9             I  ...   0.001895
10            I  ...  -0.002153
11            I  ...  -0.001262
12            I  ...   0.006585
13            I  ...  -0.002603
14            I  ...  -0.001668
15            I  ...   0.001109
16            I  ...  -0.001333
17            I  ...   0.000709
18            I  ...   0.001089
19            I  ...  -0.001015
20            Q  ...  -0.005129
21            Q  ...  -0.001217
22            Q  ...  -0.004443
23            Q  ...   0.005646
24            Q  ...  -0.000244
25            Q  ...  -0.005724
26            Q  ...   0.001302
27            Q  ...  -0.002923
28            Q  ...  -0.002913
29            Q  ...   0.007969
30            Q  ...  -0.001296
31            Q  ...  -0.000606
32            Q  ...  -0.002765
33            Q  ...   0.033251
34            Q  ...   0.006391
35            Q  ...  -0.016390
36            Q  ...  -0.008047
37            Q  ...  -0.004457
38            Q  ...   0.000175
39            Q  ...   0.003644

[40 rows x 5 columns]
I will be visualizing the difference column in a figure to identify large and small differences between
    conditional and marginal probabilities
    
SECTION 7 - ANSWER: A paragraph interpreting the differences can be found in the .docx file of the assignment
